// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/avarex_llama.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class AvarexLlamaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AvarexLlamaBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AvarexLlamaBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<ffi.Char> run_generation(
    ffi.Pointer<ffi.Char> promptc,
    int n_predict,
  ) {
    return _run_generation(promptc, n_predict);
  }

  late final _run_generationPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('run_generation');
  late final _run_generation = _run_generationPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void start_llama(ffi.Pointer<ffi.Char> model_path) {
    return _start_llama(model_path);
  }

  late final _start_llamaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'start_llama',
      );
  late final _start_llama = _start_llamaPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void free_string(ffi.Pointer<ffi.Char> str) {
    return _free_string(str);
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_string',
      );
  late final _free_string = _free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
